#import clipped raster list
heima_path <- "C:/Users/trygg/Documents/Master_project"
#work_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
# Define the file path
file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project/Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv"
file_path <- heima_path + "/Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv"
heima_path <- "C:/Users/trygg/Documents/Master_project"
concatenated_string <- paste0(heima_path, "/Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
print(concatenated_string)
path_points <- paste0(heima_path, "/Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
# Read the CSV file into a data frame
df_measurement_granule <- read.csv(path_points)
# Import clipped raster list
heima_path <- "C:/Users/trygg/Documents/Master_project"
#work_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
# Define the file paths
path_points <- file.path(heima_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
path_granule <- file.path(heima_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths.csv")
# Read the CSV files into data frames
df_measurement_granule <- read.csv(path_points)
fullpath_df <- read.csv(path_granule)
library(raster)
library(terra)
library(sp)
# Import clipped raster list
heima_path <- "C:/Users/trygg/Documents/Master_project"
#work_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
# Define the file paths
path_points <- file.path(heima_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
path_granule <- file.path(heima_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths.csv")
# Read the CSV files into data frames
df_measurement_granule <- read.csv(path_points)
fullpath_df <- read.csv(path_granule)
#testing
rasterinn <- fullpath_df[12, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
View(df_measurement_granule)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
# Define the file paths
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
path_granule <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths.csv")
# Read the CSV files into data frames
df_measurement_granule <- read.csv(path_points)
fullpath_df <- read.csv(path_granule)
#testing
rasterinn <- fullpath_df[12, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
# Load the sp package
library(sp)
fullpath_df[5, 'x_3006']
fullpath_df[5, 'y_3006']
# Create some example data for coordinates
longitude <- c(fullpath_df[12, 'x_3006'])
latitude <- c(fullpath_df[12, 'y_3006'])
# Combine longitude and latitude into a matrix
coords <- cbind(longitude, latitude)
# Create SpatialPoints object
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
# Print the SpatialPoints object
plot(raster_data)
#testing
rasterinn <- fullpath_df[1, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
fullpath_df[1, 'VV.tif']
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
# Define the file paths
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
path_granule <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths.csv")
# Read the CSV files into data frames
df_measurement_granule <- read.csv(path_points)
fullpath_df <- read.csv(path_granule)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
# Define the file paths
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
path_granule <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths.csv")
# Read the CSV files into data frames
df_measurement_granule <- read.csv(path_points)
fullpath_df <- read.csv(path_granule)
#testing
rasterinn <- fullpath_df[1, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
fullpath_df <- read.csv(path_granule)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
fullpath_df <- read.csv(path_granule)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
fullpath_df <- read.csv(path_points)
#testing
rasterinn <- fullpath_df[1, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
# Set CRS to SWEREF 3006
#crs(raster_data) <- CRS("+init=epsg:3006")
# Plot the raster
plot(raster_data)
#testing
rasterinn <- fullpath_df[1, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
# Set CRS to SWEREF 3006
#crs(raster_data) <- CRS("+init=epsg:3006")
# Plot the raster
plot(raster_data)
# Load the sp package
library(sp)
fullpath_df[5, 'x_3006']
fullpath_df[5, 'y_3006']
# Create some example data for coordinates
longitude <- c(fullpath_df[12, 'x_3006'])
latitude <- c(fullpath_df[12, 'y_3006'])
# Combine longitude and latitude into a matrix
coords <- cbind(longitude, latitude)
# Create SpatialPoints object
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
# Print the SpatialPoints object
plot(raster_data)
plot(sp_points, add = TRUE)
point <- extract(raster_data, sp_points, ID = FALSE, method = "bilinear")
print(point)
# Assuming `fullpath_df` is your dataframe containing file paths
# Create empty lists to store extracted values
points_vv <- list()
points_vh <- list()
points_angle <- list()
points_mask <- list()
# Loop through each row of the dataframe
for (i in 1:nrow(fullpath_df)) {
longitude <- c(fullpath_df[i, 'x_3006'])
latitude <- c(fullpath_df[i, 'y_3006'])
coords <- cbind(longitude, latitude)
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
#print(sp_points)
# Load VV raster data
rasterinn_vv <- fullpath_df[i, 'VV.tif']
raster_data_vv <- raster(rasterinn_vv)
point_vv <- extract(raster_data_vv, sp_points, ID = FALSE, method = "bilinear")
points_vv[[i]] <- point_vv
# Load VH raster data
rasterinn_vh <- fullpath_df[i, 'VH.tif']
raster_data_vh <- raster(rasterinn_vh)
point_vh <- extract(raster_data_vh, sp_points, ID = FALSE, method = "bilinear")
points_vh[[i]] <- point_vh
# Load angle raster data
rasterinn_angle <- fullpath_df[i, 'angle.tif']
raster_data_angle <- raster(rasterinn_angle)
point_angle <- extract(raster_data_angle, sp_points, ID = FALSE, method = "bilinear")
points_angle[[i]] <- point_angle
# Load mask raster data
rasterinn_mask <- fullpath_df[i, 'mask.tif']
raster_data_mask <- raster(rasterinn_mask)
point_mask <- extract(raster_data_mask, sp_points, ID = FALSE, method = "simple")
points_mask[[i]] <- point_mask
}
View(points_angle)
#add new values
# Assuming points_vv is a list and fullpath_df is a dataframe
# Check if the lengths match
if (length(points_vv) == nrow(fullpath_df)) {
# Add points_vv as a new column to fullpath_df with column name "point_VV"
fullpath_df$point_VV <- points_vv
} else {
print("The lengths of points_vv and fullpath_df do not match.")
}
View(fullpath_df)
#add new values
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$point_angle <- points_angle
fullpath_df$point_mask <- points_mask
View(fullpath_df)
View(points_mask)
install.packages("openxlsx")
#install.packages("openxlsx")
library(openxlsx)
#install.packages("openxlsx")
library(openxlsx)
# Export dataframe to Excel file
write.xlsx(fullpath_df, file = "fullpath_data.xlsx", rowNames = TRUE)
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(df)] <- "default_value"
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(fullpath_df)] <- "default_value"
View(fullpath_df)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
fullpath_df <- read.csv(path_points)
#testing
rasterinn <- fullpath_df[1, 'VV.tif']
# Load raster data
raster_data <- raster(rasterinn)
# Set CRS to SWEREF 3006
#crs(raster_data) <- CRS("+init=epsg:3006")
# Plot the raster
plot(raster_data)
# Load the sp package
fullpath_df[5, 'x_3006']
fullpath_df[5, 'y_3006']
# Create some example data for coordinates
longitude <- c(fullpath_df[12, 'x_3006'])
latitude <- c(fullpath_df[12, 'y_3006'])
# Combine longitude and latitude into a matrix
coords <- cbind(longitude, latitude)
# Create SpatialPoints object
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
# Print the SpatialPoints object
plot(raster_data)
plot(sp_points, add = TRUE)
point <- extract(raster_data, sp_points, ID = FALSE, method = "bilinear")
print(point)
# Assuming `fullpath_df` is your dataframe containing file paths
# Create empty lists to store extracted values
points_vv <- list()
points_vh <- list()
points_angle <- list()
points_mask <- list()
# Loop through each row of the dataframe
for (i in 1:nrow(fullpath_df)) {
longitude <- c(fullpath_df[i, 'x_3006'])
latitude <- c(fullpath_df[i, 'y_3006'])
coords <- cbind(longitude, latitude)
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
#print(sp_points)
# Load VV raster data
rasterinn_vv <- fullpath_df[i, 'VV.tif']
raster_data_vv <- raster(rasterinn_vv)
point_vv <- extract(raster_data_vv, sp_points, ID = FALSE, method = "bilinear")
points_vv[[i]] <- point_vv
# Load VH raster data
rasterinn_vh <- fullpath_df[i, 'VH.tif']
raster_data_vh <- raster(rasterinn_vh)
point_vh <- extract(raster_data_vh, sp_points, ID = FALSE, method = "bilinear")
points_vh[[i]] <- point_vh
# Load angle raster data
rasterinn_angle <- fullpath_df[i, 'angle.tif']
raster_data_angle <- raster(rasterinn_angle)
point_angle <- extract(raster_data_angle, sp_points, ID = FALSE, method = "bilinear")
points_angle[[i]] <- point_angle
# Load mask raster data
rasterinn_mask <- fullpath_df[i, 'mask.tif']
raster_data_mask <- raster(rasterinn_mask)
point_mask <- extract(raster_data_mask, sp_points, ID = FALSE, method = "simple")
points_mask[[i]] <- point_mask
}
#add new values
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$point_angle <- points_angle
fullpath_df$point_mask <- points_mask
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(fullpath_df)
View(df)
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
#df <- na.omit(fullpath_df)
df <- df[, -which(names(df) == "point_mask")]
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(fullpath_df)
#df <- df[, -which(names(df) == "point_mask")]
View(df)
View(df)
View(df)
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(fullpath_df)
fullpath_df <- fullpath_df[, -which(names(fullpath_df) == "point_mask")]
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(fullpath_df)
#fullpath_df <- fullpath_df[, -which(names(fullpath_df) == "point_mask")]
View(df)
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(df)
#fullpath_df <- fullpath_df[, -which(names(fullpath_df) == "point_mask")]
#FIX na
# Replace NA values with a default value
#fullpath_df[is.na(fullpath_df)] <- "default_value"
# Remove rows with NA values
df <- na.omit(df)
#fullpath_df <- fullpath_df[, -which(names(fullpath_df) == "point_mask")]
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(fullpath_df)] <- "default_value"
View(fullpath_df)
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(fullpath_df)] <- "default_value"
df <- fullpath_df[fullpath_df$point_angle != "default_value", ]
View(df)
rounded_list <- lapply(points_angle, round, digits = 2)
View(rounded_list)
rounded_list <- lapply(points_vv, round, digits = 2)
View(rounded_list)
# Assuming `fullpath_df` is your dataframe containing file paths
# Create empty lists to store extracted values
points_vv <- list()
points_vh <- list()
points_angle <- list()
points_mask <- list()
# Loop through each row of the dataframe
for (i in 1:nrow(fullpath_df)) {
longitude <- c(fullpath_df[i, 'x_3006'])
latitude <- c(fullpath_df[i, 'y_3006'])
coords <- cbind(longitude, latitude)
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
#print(sp_points)
# Load VV raster data
rasterinn_vv <- fullpath_df[i, 'VV.tif']
raster_data_vv <- raster(rasterinn_vv)
point_vv <- extract(raster_data_vv, sp_points, ID = FALSE, method = "bilinear")
points_vv[[i]] <- point_vv
# Load VH raster data
rasterinn_vh <- fullpath_df[i, 'VH.tif']
raster_data_vh <- raster(rasterinn_vh)
point_vh <- extract(raster_data_vh, sp_points, ID = FALSE, method = "bilinear")
points_vh[[i]] <- point_vh
# Load angle raster data
rasterinn_angle <- fullpath_df[i, 'angle.tif']
raster_data_angle <- raster(rasterinn_angle)
point_angle <- extract(raster_data_angle, sp_points, ID = FALSE, method = "bilinear")
points_angle[[i]] <- point_angle
# Load mask raster data
rasterinn_mask <- fullpath_df[i, 'mask.tif']
raster_data_mask <- raster(rasterinn_mask)
point_mask <- extract(raster_data_mask, sp_points, ID = FALSE, method = "simple")
points_mask[[i]] <- point_mask
}
#add new values
points_vh <- lapply(points_vv, round, digits = 3)
points_vv <- lapply(points_vv, round, digits = 3)
point_angle <- lapply(point_angle, round, digits = 3)
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$point_angle <- points_angle
#fullpath_df$point_mask <- points_mask
View(fullpath_df)
View(fullpath_df)
#add new values
points_vh <- lapply(points_vv, round, digits = 3)
points_vv <- lapply(points_vv, round, digits = 3)
points_angle <- lapply(points_angle, round, digits = 3)
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$points_angle <- points_angle
#fullpath_df$point_mask <- points_mask
# Assuming `fullpath_df` is your dataframe containing file paths
# Create empty lists to store extracted values
points_vv <- list()
points_vh <- list()
points_angle <- list()
points_mask <- list()
# Loop through each row of the dataframe
for (i in 1:nrow(fullpath_df)) {
longitude <- c(fullpath_df[i, 'x_3006'])
latitude <- c(fullpath_df[i, 'y_3006'])
coords <- cbind(longitude, latitude)
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
#print(sp_points)
# Load VV raster data
rasterinn_vv <- fullpath_df[i, 'VV.tif']
raster_data_vv <- raster(rasterinn_vv)
point_vv <- extract(raster_data_vv, sp_points, ID = FALSE, method = "bilinear")
points_vv[[i]] <- point_vv
# Load VH raster data
rasterinn_vh <- fullpath_df[i, 'VH.tif']
raster_data_vh <- raster(rasterinn_vh)
point_vh <- extract(raster_data_vh, sp_points, ID = FALSE, method = "bilinear")
points_vh[[i]] <- point_vh
# Load angle raster data
rasterinn_angle <- fullpath_df[i, 'angle.tif']
raster_data_angle <- raster(rasterinn_angle)
point_angle <- extract(raster_data_angle, sp_points, ID = FALSE, method = "bilinear")
points_angle[[i]] <- point_angle
# Load mask raster data
rasterinn_mask <- fullpath_df[i, 'mask.tif']
raster_data_mask <- raster(rasterinn_mask)
point_mask <- extract(raster_data_mask, sp_points, ID = FALSE, method = "simple")
points_mask[[i]] <- point_mask
}
#add new values
points_vh <- lapply(points_vv, round, digits = 3)
points_vv <- lapply(points_vv, round, digits = 3)
points_angle <- lapply(points_angle, round, digits = 3)
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$points_angle <- points_angle
#fullpath_df$point_mask <- points_mask
View(fullpath_df)
# Import clipped raster list
file_path <- "C:/Users/trygg/Documents/Master_project"
#file_path <- "C:/Users/tryggvisi/Documents/my-awesome-masters-project"
path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_FullPaths_homeversion.csv")
#path_points <- file.path(file_path, "Data/Vindefjallen_data/Vindefjallen_cleaning/Vindefjallen_Granule_processing/vindefjallen_corner_coords_processing_2023_middletime_with_granule_paths.csv")
fullpath_df <- read.csv(path_points)
# Assuming `fullpath_df` is your dataframe containing file paths
# Create empty lists to store extracted values
points_vv <- list()
points_vh <- list()
points_angle <- list()
points_mask <- list()
# Loop through each row of the dataframe
for (i in 1:nrow(fullpath_df)) {
longitude <- c(fullpath_df[i, 'x_3006'])
latitude <- c(fullpath_df[i, 'y_3006'])
coords <- cbind(longitude, latitude)
sp_points <- SpatialPoints(coords, proj4string=CRS("+init=epsg:3006"))
#print(sp_points)
# Load VV raster data
rasterinn_vv <- fullpath_df[i, 'VV.tif']
raster_data_vv <- raster(rasterinn_vv)
point_vv <- extract(raster_data_vv, sp_points, ID = FALSE, method = "bilinear")
points_vv[[i]] <- point_vv
# Load VH raster data
rasterinn_vh <- fullpath_df[i, 'VH.tif']
raster_data_vh <- raster(rasterinn_vh)
point_vh <- extract(raster_data_vh, sp_points, ID = FALSE, method = "bilinear")
points_vh[[i]] <- point_vh
# Load angle raster data
rasterinn_angle <- fullpath_df[i, 'angle.tif']
raster_data_angle <- raster(rasterinn_angle)
point_angle <- extract(raster_data_angle, sp_points, ID = FALSE, method = "bilinear")
points_angle[[i]] <- point_angle
# Load mask raster data
rasterinn_mask <- fullpath_df[i, 'mask.tif']
raster_data_mask <- raster(rasterinn_mask)
point_mask <- extract(raster_data_mask, sp_points, ID = FALSE, method = "simple")
points_mask[[i]] <- point_mask
}
#add new values
points_vh <- lapply(points_vv, round, digits = 3)
points_vv <- lapply(points_vv, round, digits = 3)
points_angle <- lapply(points_angle, round, digits = 3)
# Assuming points_vv is a list and fullpath_df is a dataframe
fullpath_df$point_VH <- points_vh
fullpath_df$point_VV <- points_vv
fullpath_df$points_angle <- points_angle
#fullpath_df$point_mask <- points_mask
View(fullpath_df)
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(fullpath_df)] <- "default_value"
df <- fullpath_df[fullpath_df$point_angle != "default_value", ]
#FIX na
# Replace NA values with a default value
fullpath_df[is.na(fullpath_df)] <- "default_value"
df <- fullpath_df[fullpath_df$points_angle != "default_value", ]
#install.packages("openxlsx")
library(openxlsx)
# Export dataframe to Excel file
write.xlsx(fullpath_df, file = "fullpath_data.xlsx", rowNames = TRUE)
#install.packages("openxlsx")
library(openxlsx)
# Export dataframe to Excel file
write.xlsx(df, file = "fullpath_data.xlsx", rowNames = TRUE)
